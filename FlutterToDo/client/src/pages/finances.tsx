import { useState } from "react";
import React from "react";
import { useQuery } from "@tanstack/react-query";
import { Wallet, Plus, TrendingUp, TrendingDown } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import Header from "@/components/layout/header";
import TransactionForm from "@/components/financial/transaction-form";
import TransactionList from "@/components/financial/transaction-list";
import { formatNumber } from "@/lib/utils";
import { Link } from "wouter";

export default function Finances() {
  const [showTransactionForm, setShowTransactionForm] = useState(false);
  const [timePeriod, setTimePeriod] = useState("month");
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());

  const { data: transactions = [], isLoading } = useQuery({
    queryKey: ["/api/transactions"],
  });

  console.log('üí∞ Transactions loaded:', transactions?.length || 0, transactions);
  
  // Force re-render when transactions change
  const [renderKey, setRenderKey] = useState(0);
  
  // Update render key when transactions change
  React.useEffect(() => {
    setRenderKey(prev => prev + 1);
  }, [transactions]);

  const { data: user } = useQuery({
    queryKey: ["/api/user"],
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
  const getFilteredTransactions = () => {
    const now = new Date();
    
    switch (timePeriod) {
      case "week":
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(now.getDate() - 7);
        oneWeekAgo.setHours(0, 0, 0, 0);
        return transactions.filter((t: any) => {
          const transactionDate = new Date(t.date || t.createdAt);
          transactionDate.setHours(0, 0, 0, 0);
          return transactionDate >= oneWeekAgo;
        });
      case "month":
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (—Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
        const startOfCurrentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        return transactions.filter((t: any) => {
          const transactionDate = new Date(t.date || t.createdAt);
          return transactionDate >= startOfCurrentMonth && transactionDate <= now;
        });
      case "quarter":
        const startOfQuarter = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);
        return transactions.filter((t: any) => {
          const transactionDate = new Date(t.date || t.createdAt);
          return transactionDate >= startOfQuarter && transactionDate <= now;
        });
      case "year":
        const startOfYear = new Date(now.getFullYear(), 0, 1);
        return transactions.filter((t: any) => {
          const transactionDate = new Date(t.date || t.createdAt);
          return transactionDate >= startOfYear && transactionDate <= now;
        });
      case "all":
        return transactions;
      default:
        return transactions;
    }
  };

  const filteredTransactions = getFilteredTransactions();

  // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥)
  const totalIncome = filteredTransactions
    .filter((t: any) => t.type === 'income')
    .reduce((sum: number, t: any) => sum + Number(t.amount || 0), 0);

  const totalExpenses = filteredTransactions
    .filter((t: any) => t.type === 'expense')
    .reduce((sum: number, t: any) => sum + Number(t.amount || 0), 0);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ–±–∑–æ—Ä–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É
  const getMonthFilteredTransactions = () => {
    return transactions.filter((t: any) => {
      const transactionDate = new Date(t.date || t.createdAt);
      return transactionDate.getMonth() === selectedMonth && transactionDate.getFullYear() === selectedYear;
    });
  };

  const monthFilteredTransactions = getMonthFilteredTransactions();

  const netIncome = totalIncome - totalExpenses;

  console.log('üìä Financial calculations:', {
    totalTransactions: transactions.length,
    filteredTransactions: filteredTransactions.length,
    totalIncome,
    totalExpenses,
    netIncome,
    timePeriod,
    sampleTransaction: transactions[0],
    filteredSample: filteredTransactions[0],
    renderKey
  });
  
  // Log widget values directly
  console.log('üéØ Widget Values:', {
    totalIncomeFormatted: formatNumber(totalIncome),
    totalExpensesFormatted: formatNumber(totalExpenses),
    netIncomeFormatted: formatNumber(netIncome),
    periodLabel: getPeriodLabel()
  });
  const totalAssets = netIncome; // –ß–∏—Å—Ç—ã–µ –∞–∫—Ç–∏–≤—ã –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const averageTransaction = filteredTransactions.length > 0 ? (totalIncome + totalExpenses) / filteredTransactions.length : 0;

  // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –æ–±–∑–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü)
  const monthTotalIncome = monthFilteredTransactions
    .filter((t: any) => t.type === 'income')
    .reduce((sum: number, t: any) => sum + Number(t.amount || 0), 0);

  const monthTotalExpenses = monthFilteredTransactions
    .filter((t: any) => t.type === 'expense')
    .reduce((sum: number, t: any) => sum + Number(t.amount || 0), 0);

  const monthNetIncome = monthTotalIncome - monthTotalExpenses;
  const monthAverageTransaction = monthFilteredTransactions.length > 0 ? (monthTotalIncome + monthTotalExpenses) / monthFilteredTransactions.length : 0;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
  const getLargestTransaction = () => {
    if (monthFilteredTransactions.length === 0) return 0;
    return Math.max(...monthFilteredTransactions.map((t: any) => parseFloat(t.amount)));
  };

  const getTopIncomeCategory = () => {
    const incomeTransactions = monthFilteredTransactions.filter((t: any) => t.type === 'income');
    if (incomeTransactions.length === 0) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const categoryTotals: { [key: string]: number } = {};
    incomeTransactions.forEach((t: any) => {
      categoryTotals[t.category] = (categoryTotals[t.category] || 0) + parseFloat(t.amount);
    });
    
    const topCategory = Object.entries(categoryTotals).reduce((a, b) => a[1] > b[1] ? a : b);
    return topCategory[0];
  };

  const getTopExpenseCategory = () => {
    const expenseTransactions = monthFilteredTransactions.filter((t: any) => t.type === 'expense');
    if (expenseTransactions.length === 0) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const categoryTotals: { [key: string]: number } = {};
    expenseTransactions.forEach((t: any) => {
      categoryTotals[t.category] = (categoryTotals[t.category] || 0) + parseFloat(t.amount);
    });
    
    const topCategory = Object.entries(categoryTotals).reduce((a, b) => a[1] > b[1] ? a : b);
    return topCategory[0];
  };

  const largestTransaction = getLargestTransaction();
  const topIncomeCategory = getTopIncomeCategory();
  const topExpenseCategory = getTopExpenseCategory();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  const getPeriodLabel = () => {
    switch (timePeriod) {
      case "week": return "–ó–∞ –Ω–µ–¥–µ–ª—é";
      case "month": return "–ó–∞ –º–µ—Å—è—Ü";
      case "quarter": return "–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª";
      case "year": return "–ó–∞ –≥–æ–¥";
      case "all": return "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è";
      default: return "–ó–∞ –º–µ—Å—è—Ü";
    }
  };

  // –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
  const monthNames = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
  const getSelectedMonthLabel = () => {
    return `${monthNames[selectedMonth]} ${selectedYear}`;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
  const isCurrentMonth = () => {
    const currentDate = new Date();
    return selectedMonth === currentDate.getMonth() && selectedYear === currentDate.getFullYear();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
  const goToCurrentMonth = () => {
    const currentDate = new Date();
    setSelectedMonth(currentDate.getMonth());
    setSelectedYear(currentDate.getFullYear());
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–µ—Å—è—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞
  const isMonthAvailable = (monthIndex: number, year: number) => {
    const currentDate = new Date();
    const monthDate = new Date(year, monthIndex);
    return monthDate <= currentDate;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
  const getAvailableMonths = () => {
    const currentDate = new Date();
    if (selectedYear > currentDate.getFullYear()) {
      return [];
    } else if (selectedYear === currentDate.getFullYear()) {
      // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
      const availableMonths = [];
      for (let i = 0; i <= currentDate.getMonth(); i++) {
        availableMonths.push({ name: monthNames[i], index: i });
      }
      return availableMonths;
    } else {
      // –î–ª—è –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã
      return monthNames.map((name, index) => ({ name, index }));
    }
  };

  return (
    <div className="min-h-screen">
      <Header />
      
      <main className="container mx-auto px-4 py-8 max-w-md">
        <div className="mb-6">
          <Link href="/" className="text-primary hover:underline mb-4 inline-block text-sm">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ü–∞–Ω–µ–ª–∏
          </Link>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Wallet className="w-6 h-6 text-yellow-400" />
              <h1 className="text-xl font-bold tracking-wide">–ú–æ–∏ –§–∏–Ω–∞–Ω—Å—ã</h1>
            </div>
            <Button 
              className="premium-button text-sm"
              onClick={() => setShowTransactionForm(true)}
            >
              <Plus className="w-4 h-4 mr-1" />
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </div>
          <p className="text-muted-foreground mt-2 text-sm">
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ—Ö–æ–¥–∞–º–∏
          </p>
        </div>

        <div className="space-y-4 mb-6" key={renderKey}>
          <div className="flex justify-between items-center">
            <h2 className="text-sm font-medium text-muted-foreground">–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:</h2>
            <Select value={timePeriod} onValueChange={setTimePeriod}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="week">–ù–µ–¥–µ–ª—è</SelectItem>
                <SelectItem value="month">–ú–µ—Å—è—Ü</SelectItem>
                <SelectItem value="quarter">–ö–≤–∞—Ä—Ç–∞–ª</SelectItem>
                <SelectItem value="year">–ì–æ–¥</SelectItem>
                <SelectItem value="all">–í—Å—ë –≤—Ä–µ–º—è</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Card className="premium-card">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">–û–±—â–∏–π –î–æ—Ö–æ–¥</CardTitle>
              <TrendingUp className="h-4 w-4 text-green-400" />
            </CardHeader>
            <CardContent>
              <div className="text-xl font-bold text-green-400">
                {formatNumber(totalIncome)} ({totalIncome})
              </div>
              <p className="text-xs text-muted-foreground">
                {getPeriodLabel()} - {filteredTransactions.length}—Ç—Ä
              </p>
            </CardContent>
          </Card>

          <Card className="premium-card">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">–û–±—â–∏–µ –†–∞—Å—Ö–æ–¥—ã</CardTitle>
              <TrendingDown className="h-4 w-4 text-red-400" />
            </CardHeader>
            <CardContent>
              <div className="text-xl font-bold text-red-400">
                {formatNumber(totalExpenses)} ({totalExpenses})
              </div>
              <p className="text-xs text-muted-foreground">
                {getPeriodLabel()} - {filteredTransactions.length}—Ç—Ä
              </p>
            </CardContent>
          </Card>

          <Card className="premium-card">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">–ß–∏—Å—Ç—ã–π –î–æ—Ö–æ–¥</CardTitle>
              <Wallet className="h-4 w-4 text-yellow-400" />
            </CardHeader>
            <CardContent>
              <div className={`text-xl font-bold ${netIncome >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                {formatNumber(netIncome)} ({netIncome})
              </div>
              <p className="text-xs text-muted-foreground">
                {getPeriodLabel()} - {filteredTransactions.length}—Ç—Ä
              </p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="transactions" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="transactions">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</TabsTrigger>
            <TabsTrigger value="overview">–û–±–∑–æ—Ä</TabsTrigger>
          </TabsList>
          
          <TabsContent value="transactions" className="space-y-4">
            <TransactionList 
              transactions={transactions} 
              isLoading={isLoading} 
            />
          </TabsContent>
          
          <TabsContent value="overview" className="space-y-4">
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-sm font-medium text-muted-foreground">–ú–µ—Å—è—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</h2>
                <div className="flex gap-2 items-center">
                  <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>
                    <SelectTrigger className="w-32">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {getAvailableMonths().map((month) => (
                        <SelectItem key={month.index} value={month.index.toString()}>
                          {month.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>
                    <SelectTrigger className="w-20">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="2023">2023</SelectItem>
                      <SelectItem value="2024">2024</SelectItem>
                      <SelectItem value="2025">2025</SelectItem>
                    </SelectContent>
                  </Select>
                  {!isCurrentMonth() && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={goToCurrentMonth}
                      className="text-xs bg-purple-500/10 border-purple-500/20 text-purple-400 hover:bg-purple-500/20 hover:border-purple-500/30"
                    >
                      –°–µ–≥–æ–¥–Ω—è
                    </Button>
                  )}
                </div>
              </div>

              <Card className="premium-card">
                <CardHeader>
                  <CardTitle className="text-lg">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –°–≤–æ–¥–∫–∞ - {getSelectedMonthLabel()}</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span>–ß–∏—Å—Ç—ã–µ –ê–∫—Ç–∏–≤—ã</span>
                    <span className={`font-semibold ${monthNetIncome >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                      {formatNumber(monthNetIncome)}
                    </span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–û–±—â–∏–π –î–æ—Ö–æ–¥</span>
                    <span className="font-semibold text-green-400">
                      {formatNumber(monthTotalIncome)}
                    </span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>–û–±—â–∏–µ –†–∞—Å—Ö–æ–¥—ã</span>
                    <span className="font-semibold text-red-400">
                      {formatNumber(monthTotalExpenses)}
                    </span>
                  </div>
                </CardContent>
              </Card>

              <Card className="premium-card">
                <CardHeader>
                  <CardTitle className="text-lg">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ {getSelectedMonthLabel()}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</span>
                      <span className="font-semibold">{monthFilteredTransactions.length}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>–°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</span>
                      <span className="font-semibold">
                        {formatNumber(monthAverageTransaction)}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>–ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü</span>
                      <span className={`font-semibold ${monthNetIncome >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                        {monthNetIncome >= 0 ? '+' : ''}{formatNumber(monthNetIncome)}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="premium-card">
                <CardHeader>
                  <CardTitle className="text-lg">–î–µ—Ç–∞–ª—å–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>–ù–∞–∏–±–æ–ª—å—à–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</span>
                      <span className="font-semibold text-blue-400">
                        {formatNumber(largestTransaction)}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥</span>
                      <span className="font-semibold text-green-400">
                        {topIncomeCategory}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—Ö–æ–¥</span>
                      <span className="font-semibold text-red-400">
                        {topExpenseCategory}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {showTransactionForm && (
          <TransactionForm 
            onClose={() => setShowTransactionForm(false)}
          />
        )}
      </main>
    </div>
  );
}
